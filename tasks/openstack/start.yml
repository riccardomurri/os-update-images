---

- name: start VM instance
  os_server:
    name: 'os-update-images-{{ uuid }}-{{ name }}'
    state: present
    wait: yes
    image: '{{ uuid }}'
    boot_from_volume: no
    flavor: '{{ flavor }}'
    key_name: '{{ keypair }}'
    network: '{{ network }}'

- name: gather VM facts
  os_server_info:
    server: 'os-update-images-{{ uuid }}-{{ name }}'
    detailed: no
  register: vm_facts

- name: print info for debugging
  debug:
    var: vm_facts
  when: 'debug|default(False)|bool'

- name: find out VM IPv4 address
  set_fact:
    # depending on the configuration, OpenStack may make the actual
    # IPv4 address available in one of several variables -- use the
    # first one which is not the empty string
    vm_ip_addr: '{{ vm_facts.openstack_servers[0].accessIPv4 or vm_facts.openstack_servers[0].public_v4 or vm_facts.openstack_servers[0].private_v4 }}'

- name: Add VM to inventory
  add_host:
    # `hostname` is the *IP address* of the new host
    hostname: '{{ vm_ip_addr }}'
    groups: 'targets'
    ansible_ssh_user: '{{ user }}'
    ansible_user: '{{ user }}'
    instance_uuid: '{{ vm_facts.openstack_servers[0].id }}'
    # following is the uuid of the image
    uuid: '{{ uuid }}'
    extra_plays: '{{ extra_plays }}'
    extra_prefix: '{{ extra_prefix }}'

- name: prepare VM for Ansible
  # this is needed on official Ubuntu 16.04 images, otherwise the next
  # playbook fails already at the `gather_facts:` step because no Python 2.x
  # can be found -- so it needs to run *before* the "update VM images" play
  shell: |
      while true; do
          if ssh -o UserKnownHostsFile=/dev/null \
              -o StrictHostKeyChecking=no \
              {{ user }}@{{ vm_ip_addr }} \
              'command -v apt-get && sudo apt-get install -y python; exit 0';
          then
              break
          fi
          sleep 10
      done
  when: 'install_python2|bool'
